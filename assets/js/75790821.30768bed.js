"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2556],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,l=function(e,t){if(null==e)return{};var n,r,l={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=r.createContext({}),c=function(e){var t=r.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(o.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,l=e.mdxType,a=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),k=l,h=u["".concat(o,".").concat(k)]||u[k]||p[k]||a;return n?r.createElement(h,s(s({ref:t},d),{},{components:n})):r.createElement(h,s({ref:t},d))}));function h(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var a=n.length,s=new Array(a);s[0]=k;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[u]="string"==typeof e?e:l,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},1073:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var r=n(7462),l=(n(7294),n(3905));const a={sidebar_position:3},s=void 0,i={unversionedId:"\u521d\u9636\u6570\u636e\u7ed3\u6784/\u94fe\u8868OJ",id:"\u521d\u9636\u6570\u636e\u7ed3\u6784/\u94fe\u8868OJ",title:"\u94fe\u8868OJ",description:"\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9",source:"@site/docs/\u521d\u9636\u6570\u636e\u7ed3\u6784/4.\u94fe\u8868OJ.md",sourceDirName:"\u521d\u9636\u6570\u636e\u7ed3\u6784",slug:"/\u521d\u9636\u6570\u636e\u7ed3\u6784/\u94fe\u8868OJ",permalink:"/docs/\u521d\u9636\u6570\u636e\u7ed3\u6784/\u94fe\u8868OJ",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/\u521d\u9636\u6570\u636e\u7ed3\u6784/4.\u94fe\u8868OJ.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"\u94fe\u8868\u9762\u8bd5\u9898",permalink:"/docs/\u521d\u9636\u6570\u636e\u7ed3\u6784/\u94fe\u8868\u9762\u8bd5\u9898"},next:{title:"Linux\u7cfb\u7edf",permalink:"/docs/category/linux\u7cfb\u7edf"}},o={},c=[{value:"\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9",id:"\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9",level:2},{value:"\u5408\u5e76\u94fe\u8868",id:"\u5408\u5e76\u94fe\u8868",level:2},{value:"\u6cd5\u4e00\uff1a\u5f52\u5e76\u7684\u601d\u8def",id:"\u6cd5\u4e00\u5f52\u5e76\u7684\u601d\u8def",level:3},{value:"\u6cd5\u4e8c\uff1a\u5e26\u54e8\u5175\u536b\u7684\u5934\u7ed3\u70b9",id:"\u6cd5\u4e8c\u5e26\u54e8\u5175\u536b\u7684\u5934\u7ed3\u70b9",level:3},{value:"\u94fe\u8868\u5206\u5272",id:"\u94fe\u8868\u5206\u5272",level:2},{value:"\u94fe\u8868\u7684\u56de\u6587\u7ed3\u6784",id:"\u94fe\u8868\u7684\u56de\u6587\u7ed3\u6784",level:2},{value:"\u76f8\u4ea4\u94fe\u8868",id:"\u76f8\u4ea4\u94fe\u8868",level:2},{value:"\u73af\u5f62\u94fe\u8868",id:"\u73af\u5f62\u94fe\u8868",level:2}],d={toc:c},u="wrapper";function p(e){let{components:t,...n}=e;return(0,l.kt)(u,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9"},(0,l.kt)("a",{parentName:"h2",href:"https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&&tqId=11167&rp=2&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking"},"\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9")),(0,l.kt)("p",null,"\u8f93\u5165\u4e00\u4e2a\u94fe\u8868\uff0c\u8f93\u51fa\u8be5\u94fe\u8868\u4e2d\u5012\u6570\u7b2ck\u4e2a\u7ed3\u70b9\u3002"),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"\u8f93\u5165\uff1a")),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre"},"1,{1,2,3,4,5}\n")),(0,l.kt)("p",{parentName:"blockquote"},"\u590d\u5236"),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"\u8fd4\u56de\u503c\uff1a")),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre"},"{5}\n")),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"\u8f93\u5165\uff1a")),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre"},"//\u6b64\u65f6\u94fe\u8868\u6ca1\u6709K\u6b65\u957f\n100,{1,2,3,4,5}\n")),(0,l.kt)("p",{parentName:"blockquote"},"\u590d\u5236"),(0,l.kt)("p",{parentName:"blockquote"},(0,l.kt)("strong",{parentName:"p"},"\u8fd4\u56de\u503c\uff1a")),(0,l.kt)("pre",{parentName:"blockquote"},(0,l.kt)("code",{parentName:"pre"},"{}\n"))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode* FindKthToTail(struct ListNode* pListHead, int k ) {\n    // write code here\n    struct ListNode* slow,*fast;\n    slow=fast=pListHead;\n   while(k--)//fast \u5148\u8d70K\u6b65\uff0c\u7136\u540e\u518d\u4e00\u8d77\u8d70\uff0c\u5f53fast\u4e3a\u7a7a\u65f6 slow\u6240\u5904\u5728\u7684\u4f4d\u7f6e\u5c31\u6b63\u597d\u662f\u5012\u6570\u7b2ck\u4e2a\n   {\n    if(fast==NULL)//\u5224\u65ad\u94fe\u8868\u662f\u5426\u6709k\u6b65\u957f\uff0c\u5f53fast\u4e3a\u7a7a\u65f6\uff0ck\u8fd8\u5728\u5faa\u73af\u5c31\u8bc1\u660e\u94fe\u8868\u6ca1\u6709k\u6b65\u957f\uff0c\u6b64\u65f6\u8fd4\u56deNULL\n    {\n        return NULL;\n    }\n    fast=fast->next;\n   }\n   while (fast) {\n    slow= slow->next;\n    fast=fast->next;\n   }\n   return slow;\n}\n")),(0,l.kt)("h2",{id:"\u5408\u5e76\u94fe\u8868"},(0,l.kt)("a",{parentName:"h2",href:"https://leetcode.cn/problems/merge-two-sorted-lists/description/"},"\u5408\u5e76\u94fe\u8868")),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/merge-two-sorted-lists/description/"},"https://leetcode.cn/problems/merge-two-sorted-lists/description/")),(0,l.kt)("h3",{id:"\u6cd5\u4e00\u5f52\u5e76\u7684\u601d\u8def"},"\u6cd5\u4e00\uff1a\u5f52\u5e76\u7684\u601d\u8def"),(0,l.kt)("p",null,"\u5c06\u4e24\u4e2a\u5347\u5e8f\u94fe\u8868\u5408\u5e76\u4e3a\u4e00\u4e2a\u65b0\u7684 ",(0,l.kt)("strong",{parentName:"p"},"\u5347\u5e8f")," \u94fe\u8868\u5e76\u8fd4\u56de\u3002\u65b0\u94fe\u8868\u662f\u901a\u8fc7\u62fc\u63a5\u7ed9\u5b9a\u7684\u4e24\u4e2a\u94fe\u8868\u7684\u6240\u6709\u8282\u70b9\u7ec4\u6210\u7684\u3002"),(0,l.kt)("blockquote",null,(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),"L1 = [1,2,4], L2 = [1,3,4]",(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),"[1,1,2,3,4,4]"),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),"l1 = [], l2 = []",(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),"[]"),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a"),"l1 = [], l2 = [0]",(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),"[0]")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\nif(list1==NULL)\n    return list2;\nif(list2==NULL)\n    return list1;\n    //\u4e0a\u9762\u4e24\u4e2a\u5224\u65ad \u5176\u4e2d\u4e00\u4e2a\u4e3a\u7a7a\u5219\u76f4\u63a5\u8fd4\u56de\u53e6\u4e00\u4e2a \u53e6\u4e00\u4e2a\u4e3a\u7a7a\u4e5f\u7b26\u5408\u6761\u4ef6\n\nstruct ListNode* head,*tail;\nhead = tail = NULL;\nwhile(list1 && list2)//\u60f3\u7ee7\u7eed\u7684\u6761\u4ef6\n{\n    if(list1->val < list2->val)\n    {\n        if(tail==NULL)\n        {//\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4f1a\u8fdb\u6765\uff0c\u5f53tail\u548chead\u90fd\u6ca1\u6709\u65f6\n            head=tail=list1;\n        }\n        else\n        {\n            tail->next=list1;\n            tail=tail->next;\n            //\u6211\u5199\u5728\u8fd9\u91cc\n            //list1=list1->next;//\u4f1a\u8d85\u51fa\u65f6\u95f4\u9650\u5236 \u7f16\u8bd1\u4e0d\u901a\u8fc7\n        }\n        //\u8001\u5e08\u5199\u5728\u8fd9\u91cc\n        list1=list1->next;//\u53ef\u4ee5\u901a\u8fc7\n    }\n    else\n    {\n         if(tail==NULL)\n        {//\u7b2c\u4e00\u6b21\u7684\u65f6\u5019\u4f1a\u8fdb\u6765\uff0c\u5f53tail\u548chead\u90fd\u6ca1\u6709\u65f6\n            head=tail=list2;\n        }\n        else\n        {\n            tail->next=list2;\n            tail=tail->next;\n            //\u6211\u5199\u5728\u8fd9\u91cc \u7f16\u8bd1\u4e0d\u901a\u8fc7\n           //list2=list2->next;\n        }\n        //\u8001\u5e08\u5199\u5728\u8fd9\u91cc\n        list2=list2->next;\n    }\n}\n//\u4e0a\u9762while\u5faa\u73af\u7ed3\u675f\u5c31\u8bf4\u660e\u6709\u4e00\u4e2a\u94fe\u8868\u5df2\u7ecf\u8d70\u5b8c\uff0c\u53ea\u8981\u628a\u6ca1\u6709\u8d70\u5b8c\u7684\u94fe\u8868\u94fe\u63a5\u5230tail\u4e4b\u540e\u5c31\u597d\nif(list1)\n    tail->next=list1;\n\nif(list2)\n    tail->next=list2;\n\nreturn head; \n}\n")),(0,l.kt)("h3",{id:"\u6cd5\u4e8c\u5e26\u54e8\u5175\u536b\u7684\u5934\u7ed3\u70b9"},"\u6cd5\u4e8c\uff1a\u5e26\u54e8\u5175\u536b\u7684\u5934\u7ed3\u70b9"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode* mergeTwoLists(struct ListNode* list1, struct ListNode* list2){\n\nstruct ListNode* head,*tail;\nhead = tail = (struct ListNode*)malloc(sizeof(struct ListNode));\ntail->next=NULL;\nwhile(list1 && list2)//\u60f3\u7ee7\u7eed\u7684\u6761\u4ef6\n{\n    if(list1->val < list2->val)\n    {\n  \n  \n        tail->next=list1;\n        tail=tail->next;\n        list1=list1->next;\n    }\n    else\n    {\n   \n   \n        tail->next=list2;\n        tail=tail->next;\n        list2=list2->next;\n    }\n}\n//\u4e0a\u9762while\u5faa\u73af\u7ed3\u675f\u5c31\u8bf4\u660e\u6709\u4e00\u4e2a\u94fe\u8868\u5df2\u7ecf\u8d70\u5b8c\uff0c\u53ea\u8981\u628a\u6ca1\u6709\u8d70\u5b8c\u7684\u94fe\u8868\u94fe\u63a5\u5230tail\u4e4b\u540e\u5c31\u597d\nif(list1)\n    tail->next=list1;\n\nif(list2)\n    tail->next=list2;\nstruct ListNode* list = head->next;\nfree(head);\nreturn list; \n}\n")),(0,l.kt)("h2",{id:"\u94fe\u8868\u5206\u5272"},(0,l.kt)("a",{parentName:"h2",href:"https://www.nowcoder.com/practice/0e27e0b064de4eacac178676ef9c9d70?tpId=8&&tqId=11004&rp=2&ru=/activity/oj&qru=/ta/cracking-the-coding-interview/question-ranking"},"\u94fe\u8868\u5206\u5272")),(0,l.kt)("p",null,"\u73b0\u6709\u4e00\u94fe\u8868\u7684\u5934\u6307\u9488 ListNode*  ",(0,l.kt)("strong",{parentName:"p"},"pHead")," \uff0c\u7ed9\u4e00\u5b9a\u503cx\uff0c\u7f16\u5199\u4e00\u6bb5\u4ee3\u7801\u5c06\u6240\u6709\u5c0f\u4e8ex\u7684\u7ed3\u70b9\u6392\u5728\u5176\u4f59\u7ed3\u70b9\u4e4b\u524d\uff0c\u4e14\u4e0d\u80fd\u6539\u53d8\u539f\u6765\u7684\u6570\u636e\u987a\u5e8f\uff0c\u8fd4\u56de\u91cd\u65b0\u6392\u5217\u540e\u7684\u94fe\u8868\u7684\u5934\u6307\u9488\u3002"),(0,l.kt)("pre",null,(0,l.kt)("strong",null,"\u8f93\u5165\uff1a")," [5,3,2,8,1,6] x=7",(0,l.kt)("strong",null,"\u8f93\u51fa\uff1a"),"[5,3,2,1,6, 8]")," \u76f8\u5bf9\u4f4d\u7f6e\u4e0d\u53d8",(0,l.kt)("p",null,"\u7b2c\u4e00\u7248\uff1a\u901a\u8fc7\u4e0d\u4e86  \u95ee\u9898\uff1a\u5185\u5b58\u8d85\u9650"),(0,l.kt)("p",null,"\u89e3\u51b3\u65b9\u6cd5\uff1a",(0,l.kt)("strong",{parentName:"p"},"\u60f3\u6781\u7aef\u573a\u666f(   \u90fd\u6bd4x\u5c0f   \u6216\u8005   \u90fd\u6bd4x\u5927)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"//\u7b2c\u4e00\u7248\uff0c\u4e0d\u80fd\u901a\u8fc7\uff0c\u95ee\u9898\uff1a\u5185\u5b58\u8d85\u9650\n#include <cstddef>\nclass Partition {\n  public:\n    ListNode* partition(ListNode* pHead, int x) {\n        // write code here\n\n        struct ListNode* greaterhead, *greatertail, *lesshead, *lesstail;\n        greaterhead = greatertail = (struct ListNode*)malloc(sizeof(struct ListNode));\n        greatertail->next = NULL;\n  \n        lesshead = lesstail = (struct ListNode*)malloc(sizeof(struct ListNode));\n        lesstail->next=NULL;\n        struct ListNode* cur = pHead;\n\n        while (cur) {\n            if (cur->val < x ) \n            {\n               lesstail->next=cur;\n               lesstail=lesstail->next;\n            }\n            else\n            {\n                greatertail->next=cur;\n                greatertail=greatertail->next;\n            }\n\n            cur = cur ->next;\n        }\n       lesstail->next=greaterhead->next;\n       struct ListNode* head=lesshead->next;\n       free(greaterhead);\n       free(lesshead);\n       return head;\n    }\n\n\n};\n")),(0,l.kt)("blockquote",null,(0,l.kt)("p",{parentName:"blockquote"},"5,3,2,8,1,6  x=7"),(0,l.kt)("p",{parentName:"blockquote"},"\u6b64\u65f6lesshead 5,3,2,16"),(0,l.kt)("p",{parentName:"blockquote"},"greaterhead 8 (\u4f468->next \u6307\u5411\u7684\u662f1) greatertail->next  \u662f\u7b49\u4e8e1\u7684     1\u7684netx 6    \u6b64\u65f6\u5c31\u4f1a\u5f62\u6210\u73af 5\uff0c3\uff0c2\uff0c    1\uff0c6\uff0c8\uff0c    1\uff0c6\uff0c8\uff0c  1\uff0c6\uff0c8.....")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"\u4e0d\u7ba1greatertail\u7684next\u662f\u5426\u4e3a\u56de\u73af \u628agreatertail->next \u7f6e\u4e3a\u7a7a")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"          struct ListNode* greaterhead, *greatertail, *lesshead, *lesstail;\n        greaterhead = greatertail = (struct ListNode*)malloc(sizeof(struct ListNode));\n        greatertail->next = NULL;\n  \n        lesshead = lesstail = (struct ListNode*)malloc(sizeof(struct ListNode));\n        lesstail->next=NULL;\n        struct ListNode* cur = pHead;\n\n        while (cur) {\n            if (cur->val < x ) \n            {\n               lesstail->next=cur;\n               lesstail=lesstail->next;\n            }\n            else\n            {\n                greatertail->next=cur;\n                greatertail=greatertail->next;\n            }\n\n            cur = cur ->next;\n        }\n       lesstail->next=greaterhead->next;\n       greatertail->next=NULL;//\u89e3\u51b3   \u4e0d\u7ba1greatertail\u7684next\u4e3a\u56de\u73af \u628agreatertail->next \u7f6e\u4e3a\u7a7a\n       struct ListNode* head=lesshead->next;\n       free(greaterhead);\n       free(lesshead);\n       return head;\n")),(0,l.kt)("h2",{id:"\u94fe\u8868\u7684\u56de\u6587\u7ed3\u6784"},(0,l.kt)("a",{parentName:"h2",href:"https://www.nowcoder.com/practice/d281619e4b3e4a60a2cc66ea32855bfa?tpId=49&&tqId=29370&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking"},"\u94fe\u8868\u7684\u56de\u6587\u7ed3\u6784")),(0,l.kt)("p",null,"\u63cf\u8ff0"),(0,l.kt)("p",null,"\u5bf9\u4e8e\u4e00\u4e2a\u94fe\u8868\uff0c\u8bf7\u8bbe\u8ba1\u4e00\u4e2a\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n),\u989d\u5916\u7a7a\u95f4\u590d\u6742\u5ea6\u4e3aO(1)\u7684\u7b97\u6cd5\uff0c\u5224\u65ad\u5176\u662f\u5426\u4e3a\u56de\u6587\u7ed3\u6784\u3002"),(0,l.kt)("p",null,"\u7ed9\u5b9a\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u6307\u9488 ",(0,l.kt)("strong",{parentName:"p"},"A")," \uff0c\u8bf7\u8fd4\u56de\u4e00\u4e2abool\u503c\uff0c\u4ee3\u8868\u5176\u662f\u5426\u4e3a\u56de\u6587\u7ed3\u6784\u3002\u4fdd\u8bc1\u94fe\u8868\u957f\u5ea6\u5c0f\u4e8e\u7b49\u4e8e900\u3002"),(0,l.kt)("p",null,"\u6d4b\u8bd5\u6837\u4f8b\uff1a"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"1->2->2->1\n")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"}," \u8fd4\u56de\uff1atrue")),(0,l.kt)("p",null,"\u601d\u8def \uff1a"),(0,l.kt)("p",null,"1.\u5148\u7528\u5feb\u6162\u6307\u9488\u4e2d\u627e\u5230\u4e2d\u95f4\u7ed3\u70b9\uff0c"),(0,l.kt)("p",null,"2.\u7136\u540e\u9006\u7f6e\u4ece\u4e2d\u95f4\u7ed3\u70b9\u4e4b\u540e\u7684\u7ed3\u70b9\uff0c\u4f9d\u6b21\u7528\u4ece\u4e2d\u95f4\u7ed3\u70b9\u9006\u7f6e\u7684rhead\u7ed3\u70b9\u4e0e\u539f\u6765\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u6bd4\u5bf9\u3002\u76f8\u7b49\u7ee7\u7eed"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c++"},"class PalindromeList {\npublic:\n    bool chkPalindrome(ListNode* A) {\n        // write code here\n        ListNode* head = A;\n        ListNode* mid = middleNode(head);\n        ListNode* rhead = reverseList(mid);\n        while(head&&rhead)\n        {\n            if(head->val!=rhead->val)\n            {\n                return false;\n            }else \n            {\n                head=head->next;\n                rhead=rhead->next;\n            }\n        }\n        return true;\n    }\n\n//\u4e2d\u95f4\u7ed3\u70b9\nstruct ListNode* middleNode(struct ListNode* head){\n    struct ListNode* slow,*fast;\n    slow = fast = head;\n    while(fast!=NULL&&fast->next!=NULL)\n    {\n        slow = slow->next;\n        fast = fast->next->next;\n    }\n    return slow;\n}\n//\u53cd\u8f6c\u94fe\u8868\n\nstruct ListNode* reverseList(struct ListNode* head){\n\n   if(head==NULL)\n        return NULL;\n    struct ListNode *n1 , *n2, *n3;\n    n1=NULL;\n   \n    n2 = head;\n     n3=n2->next;\n    while(n2)\n    {\n   \n        n2->next = n1;\n        n1 = n2;\n        n2 = n3;\n        if(n3)\n            n3 = n3->next; \n    }\n    return n1;\n\n}\n\n")),(0,l.kt)("h2",{id:"\u76f8\u4ea4\u94fe\u8868"},"\u76f8\u4ea4\u94fe\u8868"),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e24\u4e2a\u5355\u94fe\u8868\u7684\u5934\u8282\u70b9\xa0headA \u548c headB \uff0c\u8bf7\u4f60\u627e\u51fa\u5e76\u8fd4\u56de\u4e24\u4e2a\u5355\u94fe\u8868\u76f8\u4ea4\u7684\u8d77\u59cb\u8282\u70b9\u3002\u5982\u679c\u4e24\u4e2a\u94fe\u8868\u4e0d\u5b58\u5728\u76f8\u4ea4\u8282\u70b9\uff0c\u8fd4\u56de null \u3002"),(0,l.kt)("p",null,"\u56fe\u793a\u4e24\u4e2a\u94fe\u8868\u5728\u8282\u70b9 c1 \u5f00\u59cb\u76f8\u4ea4\uff1a"),(0,l.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/intersection-of-two-linked-lists"},"https://leetcode.cn/problems/intersection-of-two-linked-lists"),"\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"struct ListNode *getIntersectionNode(struct ListNode *headA, struct ListNode *headB) {\n    struct ListNode *curA = headA,*curB = headB;\n    //\u601d\u8def:\u8ba9\u957f\u7684\u94fe\u8868\u5148\u8d70 \u5dee\u8ddd\u6b65\n    int lenA = 1, lenB = 1;\n    //\u6c42\u94fe\u8868A \u548c \u94fe\u8868B\u7684\u957f\u5ea6\n    while(curA->next)\n    {\n        lenA++;\n        curA=curA->next;//\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 \u5224\u65ad\u4ed6\u4eec\u662f\u5426\u76f8\u7b49   \u76f8\u7b49\u5219  \u5b58\u5728\u76f8\u4ea4\u7684\u7ed3\u70b9\n    }\n      while(curB->next)\n    {\n\n        lenB++;\n        curB=curB->next;//\u627e\u5230\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9 \u5224\u65ad\u4ed6\u4eec\u662f\u5426\u76f8\u7b49\n    }\n    if(curA!=curB)//\u6700\u540e\u4e00\u4e2a\u7ed3\u70b9\u90fd\u4e0d\u76f8\u7b49\u5219\u8bc1\u660e\u6ca1\u6709\u76f8\u4ea4\u7684\u7ed3\u70b9\n    {\n        return NULL;\n    }\n\n    //\u8d70\u5230\u8fd9\u91cc\u5219\u8bc1\u660e\u4e24\u4e2a\u94fe\u8868\u5b58\u5728\u4ea4\u70b9\uff0c   \u627e\u7b2c\u4e00\u4e2a\u76f8\u4ea4\u7684\u7ed3\u70b9\n    int gap = abs(lenA-lenB); //\u6c42\u51fa\u76f8\u5dee\u7684 \u6b65\u957f\n  \n    //\u5047\u8bbeheadA\u5c31\u662f\u77ed\u7684\u94fe\u8868  headB\u957f\u7684\u94fe\u8868\n    struct ListNode *shortList = headA,*longList = headB;\n  \n    //\u5047\u8bbe\u4e0d\u6210\u7acb\u505a\u51fa\u8c03\u6574\n    if(lenA>lenB)\n    {\n        shortList = headB;\n        longList = headA;\n    }\n//\u53ef\u4ee5\u786e\u4fddshortList\u4e00\u5b9a\u662f\u77ed\u7684\u94fe\u8868  longList\u662f\u957f\u7684\u94fe\u8868\n\n//\u957f\u7684\u94fe\u8868\u5148\u8d70\u5dee\u8ddd\u6b65\nwhile(gap--)\n{\n    longList=longList->next;\n}\n//\u518d\u4e00\u8d77\u8d70\n\n while(longList!=shortList)\n{\n    longList=longList->next;\n    shortList=shortList->next;\n}\nreturn longList;\n\n\n}\n")),(0,l.kt)("h2",{id:"\u73af\u5f62\u94fe\u8868"},"\u73af\u5f62\u94fe\u8868"),(0,l.kt)("p",null,"\u7ed9\u4f60\u4e00\u4e2a\u94fe\u8868\u7684\u5934\u8282\u70b9 head \uff0c\u5224\u65ad\u94fe\u8868\u4e2d\u662f\u5426\u6709\u73af\u3002"),(0,l.kt)("p",null,"\u5982\u679c\u94fe\u8868\u4e2d\u6709\u67d0\u4e2a\u8282\u70b9\uff0c\u53ef\u4ee5\u901a\u8fc7\u8fde\u7eed\u8ddf\u8e2a next \u6307\u9488\u518d\u6b21\u5230\u8fbe\uff0c\u5219\u94fe\u8868\u4e2d\u5b58\u5728\u73af\u3002 \u4e3a\u4e86\u8868\u793a\u7ed9\u5b9a\u94fe\u8868\u4e2d\u7684\u73af\uff0c\u8bc4\u6d4b\u7cfb\u7edf\u5185\u90e8\u4f7f\u7528\u6574\u6570 pos \u6765\u8868\u793a\u94fe\u8868\u5c3e\u8fde\u63a5\u5230\u94fe\u8868\u4e2d\u7684\u4f4d\u7f6e\uff08\u7d22\u5f15\u4ece 0 \u5f00\u59cb\uff09\u3002\u6ce8\u610f\uff1apos \u4e0d\u4f5c\u4e3a\u53c2\u6570\u8fdb\u884c\u4f20\u9012\xa0\u3002\u4ec5\u4ec5\u662f\u4e3a\u4e86\u6807\u8bc6\u94fe\u8868\u7684\u5b9e\u9645\u60c5\u51b5\u3002"),(0,l.kt)("p",null,"\u5982\u679c\u94fe\u8868\u4e2d\u5b58\u5728\u73af\xa0\uff0c\u5219\u8fd4\u56de true \u3002 \u5426\u5219\uff0c\u8fd4\u56de false \u3002"),(0,l.kt)("p",null,"\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u94fe\u63a5\uff1a",(0,l.kt)("a",{parentName:"p",href:"https://leetcode.cn/problems/linked-list-cycle"},"https://leetcode.cn/problems/linked-list-cycle"),"\n\u8457\u4f5c\u6743\u5f52\u9886\u6263\u7f51\u7edc\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u5b98\u65b9\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002"),(0,l.kt)("p",null,"\u601d\u8def\uff1a\u5feb\u6307\u9488 fast \u6162\u6307\u9488slow"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-c"},"bool hasCycle(struct ListNode *head) {\n    struct ListNode *slow=head ,*fast= head;\n    while(fast&&fast->next)\n    {\n        slow=slow->next;\n        fast = fast->next->next;\n        if(slow==fast)\n            return true;\n    }\n    return false;\n}\n")))}p.isMDXComponent=!0}}]);